name: Polygon Avail CI
on:
  push:
    branches:
      - main
      - develop
      - will/grid-refactor
  pull_request:
    branches:
      - main
      - develop
      - will/grid-refactor

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

        # A repository can have up to 10GB of caches.
        # Check https://github.com/actions/cache for details.
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust toolchain 1.64 
        uses: actions-rs/toolchain@v1
        with:
            toolchain: 1.64
            components: clippy, llvm-tools-preview
            default: true
            profile: minimal

      - name: Check TOML formatting
        run: |
          cargo install zepter --locked --version 0.11.0 -q -f --no-default-features && zepter --version
          zepter format features

      - name: Check code formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --check

      - name: Check Clippy 
        uses: actions-rs/cargo@v1
        with:
          command: clippy 
          args: --workspace --features "avail-core/runtime"

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --features "avail-core/runtime"
        env:
          RUSTFLAGS: "-C instrument-coverage"
          LLVM_PROFILE_FILE: "profile-%p-%m.profraw"

      - name: Generate test code coverage report
        run: |
          cargo +stable install --force grcov
          grcov . -s . --binary-path ./target/debug/ -t lcov --branch --ignore-not-existing -o lcov.info

      - name: Upload test code coverage report to codecov.io
        uses: codecov/codecov-action@v2
        with:
          files: lcov.info

      - name: Cleanup
        run: find . -name \*.profraw -type f -exec rm -f {} +
